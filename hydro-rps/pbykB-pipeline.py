# script-version: 2.0
# Catalyst state generated using paraview version 5.10.1

#### import the simple module from the paraview
from paraview.simple import *
#### disable automatic camera reset on 'Show'
paraview.simple._DisableFirstRenderCameraReset()

# ----------------------------------------------------------------
# setup views used in the visualization
# ----------------------------------------------------------------

# get the material library
materialLibrary1 = GetMaterialLibrary()

# Create a new 'Render View'
renderView1 = CreateView('RenderView')
renderView1.ViewSize = [1611, 725]
renderView1.AxesGrid = 'GridAxes3DActor'
renderView1.CenterOfRotation = [0.0, -0.000701904296875, 500.0]
renderView1.StereoType = 'Crystal Eyes'
renderView1.CameraPosition = [1964.259862960441, -0.000701904296875, 500.0]
renderView1.CameraFocalPoint = [0.0, -0.000701904296875, 500.0]
renderView1.CameraViewUp = [0.0, 0.0, 1.0]
renderView1.CameraViewAngle = 21.60919540229885
renderView1.CameraFocalDisk = 1.0
renderView1.CameraParallelScale = 508.3878620646296
renderView1.BackEnd = 'OSPRay raycaster'
renderView1.OSPRayMaterialLibrary = materialLibrary1

SetActiveView(None)

# ----------------------------------------------------------------
# setup view layouts
# ----------------------------------------------------------------

# create new layout object 'Layout #1'
layout1 = CreateLayout(name='Layout #1')
layout1.AssignView(0, renderView1)
layout1.SetSize(1611, 725)

# ----------------------------------------------------------------
# restore active view
SetActiveView(renderView1)
# ----------------------------------------------------------------

# ----------------------------------------------------------------
# setup the data processing pipelines
# ----------------------------------------------------------------

# create a new 'Ruler'
ruler1 = Ruler(registrationName='Ruler1')
ruler1.Point1 = [0.0, 130.0, 290.0]
ruler1.Point2 = [0.0, 230.0, 290.0]

# create a new 'XDMF Reader'
grid = XDMFReader(registrationName='grid', FileNames=['/scratch/ritali/project-ram-pressure/model-for-rps/final-setup-params/check/check-again/temp2e6/overpressurised/output/data.0000.dbl.xmf', '/scratch/ritali/project-ram-pressure/model-for-rps/final-setup-params/check/check-again/temp2e6/overpressurised/output/data.0001.dbl.xmf'])
grid.CellArrayStatus = ['PbykB', 'Temp', 'X', 'Y', 'Z', 'mach', 'ndens', 'prs', 'rho', 'tr1', 'tr2', 'tr3', 'vx1', 'vx2', 'vx3']
grid.GridStatus = ['node_mesh']

# create a new 'Slice'
slice1 = Slice(registrationName='Slice1', Input=grid)
slice1.SliceType = 'Plane'
slice1.HyperTreeGridSlicer = 'Plane'
slice1.SliceOffsetValues = [0.0]

# init the 'Plane' selected for 'SliceType'
slice1.SliceType.Origin = [0.0, -0.00069427490234375, 500.0]

# init the 'Plane' selected for 'HyperTreeGridSlicer'
slice1.HyperTreeGridSlicer.Origin = [0.0, -0.00069427490234375, 500.0]

# create a new 'Annotate Time Filter'
annotateTimeFilter1 = AnnotateTimeFilter(registrationName='AnnotateTimeFilter1', Input=grid)
annotateTimeFilter1.Format = 'Time: {TEXT_time:.2f} Myr'
annotateTimeFilter1.Scale = 9.81

# ----------------------------------------------------------------
# setup the visualization in view 'renderView1'
# ----------------------------------------------------------------

# show data from slice1
slice1Display = Show(slice1, renderView1, 'GeometryRepresentation')

# get color transfer function/color map for 'PbykB'
pbykBLUT = GetColorTransferFunction('PbykB')
pbykBLUT.RGBPoints = [207.61270223501572, 0.001462, 0.000466, 0.013866, 212.34767577524795, 0.002267, 0.00127, 0.01857, 217.18938993986941, 0.003299, 0.002249, 0.024239, 222.1427767197416, 0.004547, 0.003392, 0.030909, 227.20782781900886, 0.006006, 0.004692, 0.038558, 232.38970272972037, 0.007676, 0.006136, 0.046836, 237.68839277335218, 0.009561, 0.007713, 0.055143, 243.10929543723714, 0.011663, 0.009417, 0.06346, 248.65383133936496, 0.013995, 0.011225, 0.071862, 254.32335785001743, 0.016561, 0.013136, 0.080282, 260.12365020746523, 0.019373, 0.015133, 0.088767, 266.0546986974684, 0.022447, 0.017199, 0.097327, 272.1225449565134, 0.025793, 0.019331, 0.10593, 278.3271788222653, 0.029432, 0.021503, 0.114621, 284.67492061775084, 0.033385, 0.023702, 0.123397, 291.16743385119895, 0.037668, 0.025921, 0.132232, 297.8063079693501, 0.042253, 0.028139, 0.141141, 304.5983056321564, 0.046915, 0.030324, 0.150164, 311.5434154644852, 0.051644, 0.032474, 0.159254, 318.64871207195444, 0.056449, 0.034569, 0.168414, 325.91418355472234, 0.06134, 0.03659, 0.177642, 333.3472308533944, 0.066331, 0.038504, 0.186962, 340.94980189461035, 0.071429, 0.040294, 0.196354, 348.72375788085446, 0.076637, 0.041905, 0.205799, 356.677017718237, 0.081962, 0.043328, 0.215289, 364.80956808676115, 0.087411, 0.044556, 0.224813, 373.1296931731303, 0.09299, 0.045583, 0.234358, 381.63737904292645, 0.098702, 0.046402, 0.243904, 390.341292012983, 0.104551, 0.047008, 0.25343, 399.2414175061211, 0.110536, 0.047399, 0.262912, 408.34682159607115, 0.116656, 0.047574, 0.272321, 417.65989047230306, 0.122908, 0.047536, 0.281624, 427.18290408811595, 0.129285, 0.047293, 0.290788, 436.925563019491, 0.135778, 0.046856, 0.299776, 446.8878509495724, 0.142378, 0.046242, 0.308553, 457.07991591919154, 0.149073, 0.045468, 0.317085, 467.50174085883566, 0.15585, 0.044559, 0.325338, 478.16394191469067, 0.162689, 0.043554, 0.333277, 489.06931325510254, 0.169575, 0.042489, 0.340874, 500.2205246485113, 0.176493, 0.041402, 0.348111, 511.6289352274109, 0.183429, 0.040329, 0.354971, 523.2945258851703, 0.190367, 0.039309, 0.361447, 535.229179724461, 0.197297, 0.0384, 0.367535, 547.4328767573095, 0.204209, 0.037632, 0.373238, 559.9180482260805, 0.211095, 0.03703, 0.378563, 572.687966032207, 0.217949, 0.036615, 0.383522, 585.7457564079351, 0.224763, 0.036405, 0.388129, 599.1047206140628, 0.231538, 0.036405, 0.3924, 612.7648362772015, 0.238273, 0.036621, 0.396353, 626.740018214157, 0.244967, 0.037055, 0.400007, 641.0302430195104, 0.25162, 0.037705, 0.403378, 655.650067367975, 0.258234, 0.038571, 0.406485, 670.6033225745115, 0.26481, 0.039647, 0.409345, 685.8936693790963, 0.271347, 0.040922, 0.411976, 701.5366832263253, 0.27785, 0.042353, 0.414392, 717.5323379175185, 0.284321, 0.043933, 0.416608, 733.8969273560514, 0.290763, 0.045644, 0.418637, 750.6304241347628, 0.297178, 0.04747, 0.420491, 767.7498737566268, 0.303568, 0.049396, 0.422182, 785.2597625958905, 0.309935, 0.051407, 0.423721, 803.1643772877496, 0.316282, 0.05349, 0.425116, 821.4819562892976, 0.32261, 0.055634, 0.426377, 840.2124689225341, 0.328921, 0.057827, 0.427511, 859.3749949418616, 0.335217, 0.06006, 0.428524, 878.9695022541782, 0.3415, 0.062325, 0.429425, 899.0159507182678, 0.347771, 0.064616, 0.430217, 919.5195937664616, 0.354032, 0.066925, 0.430906, 940.4854509416444, 0.360284, 0.069247, 0.431497, 961.9348790221158, 0.366529, 0.071579, 0.431994, 983.8678420847023, 0.372768, 0.073915, 0.4324, 1006.3066820458669, 0.379001, 0.076253, 0.432719, 1029.2513613253875, 0.385228, 0.078591, 0.432955, 1052.7252524200037, 0.391453, 0.080927, 0.433109, 1076.7345069679286, 0.397674, 0.083257, 0.433183, 1101.285002728668, 0.403894, 0.08558, 0.433179, 1126.4017479568681, 0.410113, 0.087896, 0.433098, 1152.084700587389, 0.416331, 0.090203, 0.432943, 1178.3600224470918, 0.422549, 0.092501, 0.432714, 1205.2276695304738, 0.428768, 0.09479, 0.432412, 1232.7150104481916, 0.434987, 0.097069, 0.432039, 1260.8219991648723, 0.441207, 0.099338, 0.431594, 1289.5772667410847, 0.447428, 0.101597, 0.43108, 1318.9883488683827, 0.453651, 0.103848, 0.430498, 1349.0624457398062, 0.459875, 0.106089, 0.429846, 1379.8301922020053, 0.4661, 0.108322, 0.429125, 1411.2915367256337, 0.472328, 0.110547, 0.428334, 1443.4785272710633, 0.478558, 0.112764, 0.427475, 1476.3911099320203, 0.484789, 0.114974, 0.426548, 1510.0628109662334, 0.491022, 0.117179, 0.425552, 1544.5024544805303, 0.497257, 0.119379, 0.424488, 1579.7184717213574, 0.503493, 0.121575, 0.423356, 1615.7467353299564, 0.50973, 0.123769, 0.422156, 1652.587184966749, 0.515967, 0.12596, 0.420887, 1690.2773479938967, 0.522206, 0.12815, 0.419549, 1728.8171612884976, 0.528444, 0.130341, 0.418142, 1768.2458832620425, 0.534683, 0.132534, 0.416667, 1808.5738467235105, 0.54092, 0.134729, 0.415123, 1849.8109244521731, 0.547157, 0.136929, 0.413511, 1891.9991224160854, 0.553392, 0.139134, 0.411829, 1935.1383699591051, 0.559624, 0.141346, 0.410078, 1979.272610686208, 0.565854, 0.143567, 0.408258, 2024.4017706820498, 0.572081, 0.145797, 0.406369, 2070.571820567189, 0.578304, 0.148039, 0.404411, 2117.794859803189, 0.584521, 0.150294, 0.402385, 2166.0824491683015, 0.590734, 0.152563, 0.40029, 2215.483776603285, 0.59694, 0.154848, 0.398125, 2265.9987593715546, 0.603139, 0.157151, 0.395891, 2317.6788543383727, 0.60933, 0.159474, 0.393589, 2370.5239749507164, 0.615513, 0.161817, 0.391219, 2424.5879516585187, 0.621685, 0.164184, 0.388781, 2479.8849526294575, 0.627847, 0.166575, 0.386276, 2536.4285152464813, 0.633998, 0.168992, 0.383704, 2594.2762373612295, 0.640135, 0.171438, 0.381065, 2653.4280220912246, 0.64626, 0.173914, 0.378359, 2713.9441241421023, 0.652369, 0.176421, 0.375586, 2775.8244421624313, 0.658463, 0.178962, 0.372748, 2839.132010266285, 0.66454, 0.181539, 0.369846, 2903.8834190246, 0.670599, 0.184153, 0.366879, 2970.0945203751103, 0.676638, 0.186807, 0.363849, 3037.8327599653157, 0.682656, 0.189501, 0.360757, 3107.098024348252, 0.688653, 0.192239, 0.357603, 3177.9608702811706, 0.694627, 0.195021, 0.354388, 3250.421179084073, 0.700576, 0.197851, 0.351113, 3324.5527621321603, 0.7065, 0.200728, 0.347777, 3400.375046570148, 0.712396, 0.203656, 0.344383, 3477.9065946216965, 0.718264, 0.206636, 0.340931, 3557.2263834576042, 0.724103, 0.20967, 0.337424, 3638.334280234305, 0.729909, 0.212759, 0.333861, 3721.312905154509, 0.735683, 0.215906, 0.330245, 3806.1621192468983, 0.741423, 0.219112, 0.326576, 3892.9683537906185, 0.747127, 0.222378, 0.322856, 3981.7314634039303, 0.752794, 0.225706, 0.319085, 4072.541866238463, 0.758422, 0.229097, 0.315266, 4165.423360340396, 0.76401, 0.232554, 0.311399, 4260.398684236808, 0.769556, 0.236077, 0.307485, 4357.5645841241185, 0.775059, 0.239667, 0.303526, 4456.920897270376, 0.780517, 0.243327, 0.299523, 4558.568832547456, 0.785929, 0.247056, 0.295477, 4662.508219716951, 0.791293, 0.250856, 0.29139, 4768.8449361789535, 0.796607, 0.254728, 0.287264, 4877.606848851899, 0.801871, 0.258674, 0.283099, 4988.820583983784, 0.807082, 0.262692, 0.278898, 5102.599428957293, 0.812239, 0.266786, 0.274661, 5218.94319321737, 0.817341, 0.270954, 0.27039, 5337.970389828333, 0.822386, 0.275197, 0.266085, 5459.680819445257, 0.827372, 0.279517, 0.26175, 5584.198461862546, 0.832299, 0.283913, 0.257383, 5711.555948546549, 0.837165, 0.288385, 0.252988, 5841.7844581694835, 0.841969, 0.292933, 0.248564, 5975.016647430527, 0.846709, 0.297559, 0.244113, 6111.252293194471, 0.851384, 0.30226, 0.239636, 6250.630171303314, 0.855992, 0.307038, 0.235133, 6393.150048329139, 0.860533, 0.311892, 0.230606, 6538.957101518525, 0.865006, 0.316822, 0.226055, 6688.089541504575, 0.869409, 0.321827, 0.221482, 6840.583877734708, 0.873741, 0.326906, 0.216886, 6996.59544789456, 0.878001, 0.33206, 0.212268, 7156.123990698344, 0.882188, 0.337287, 0.207628, 7319.332009195311, 0.886302, 0.342586, 0.202968, 7486.219230047189, 0.890341, 0.347957, 0.198286, 7656.955652188284, 0.894305, 0.353399, 0.193584, 7831.586019316804, 0.898192, 0.358911, 0.18886, 8010.153083084948, 0.902003, 0.364492, 0.184116, 8192.838740047713, 0.905735, 0.37014, 0.17935, 8379.642684245959, 0.90939, 0.375856, 0.174563, 8570.755202696737, 0.912966, 0.381636, 0.169755, 8766.175975327746, 0.916462, 0.387481, 0.164924, 8966.104066650454, 0.919879, 0.393389, 0.16007, 9170.591870419332, 0.923215, 0.399359, 0.155193, 9379.689447752671, 0.92647, 0.405389, 0.150292, 9593.609794978978, 0.929644, 0.411479, 0.145367, 9812.352553827735, 0.932737, 0.417627, 0.140417, 10036.140545649203, 0.935747, 0.423831, 0.13544, 10264.973395646744, 0.938675, 0.430091, 0.130438, 10499.084203397579, 0.941521, 0.436405, 0.125409, 10738.534320681276, 0.944285, 0.442772, 0.120354, 10983.382367818576, 0.946965, 0.449191, 0.115272, 11233.877758196984, 0.949562, 0.45566, 0.110164, 11490.020072290663, 0.952075, 0.462178, 0.105031, 11752.070228342507, 0.954506, 0.468744, 0.099874, 12020.027787475006, 0.956852, 0.475356, 0.094695, 12294.165703478437, 0.959114, 0.482014, 0.089499, 12574.48351723089, 0.961293, 0.488716, 0.084289, 12861.266773241781, 0.963387, 0.495462, 0.079073, 13154.590626790177, 0.965397, 0.502249, 0.073859, 13454.526887147156, 0.967322, 0.509078, 0.068659, 13761.381083066568, 0.969163, 0.515946, 0.063488, 14075.152700633795, 0.970919, 0.522853, 0.058367, 14396.16136192844, 0.97259, 0.529798, 0.053324, 14724.406529330206, 0.974176, 0.53678, 0.048392, 15060.222568336732, 0.975677, 0.543798, 0.043618, 15403.697483905069, 0.977092, 0.55085, 0.03905, 15754.915362900367, 0.978422, 0.557937, 0.034931, 16114.233971872001, 0.979666, 0.565057, 0.031409, 16481.652709038775, 0.980824, 0.572209, 0.028508, 16857.54584388296, 0.981895, 0.579392, 0.02625, 17241.912746864593, 0.982881, 0.586606, 0.024661, 17635.144951640697, 0.983779, 0.593849, 0.02377, 18037.345509820705, 0.984591, 0.601122, 0.023606, 18448.612885026163, 0.985315, 0.608422, 0.024202, 18869.366012961942, 0.985952, 0.61575, 0.025592, 19299.604188957266, 0.986502, 0.623105, 0.027814, 19739.76567323976, 0.986964, 0.630485, 0.030908, 20189.84972863383, 0.987337, 0.63789, 0.034916, 20650.314831285086, 0.987622, 0.64532, 0.039886, 21121.281652057547, 0.987819, 0.652773, 0.045581, 21602.86548939589, 0.987926, 0.66025, 0.05175, 22095.55690656024, 0.987945, 0.667748, 0.058329, 22599.355078398567, 0.987874, 0.675267, 0.065257, 23114.77319670519, 0.987714, 0.682807, 0.072489, 23641.81039826584, 0.987464, 0.690366, 0.07999, 24181.00354721037, 0.987124, 0.697944, 0.087731, 24732.49394611043, 0.986694, 0.70554, 0.095694, 25296.416606568626, 0.986175, 0.713153, 0.103863, 25873.34596592546, 0.985566, 0.720782, 0.112229, 26463.281057948636, 0.984865, 0.728427, 0.120785, 27066.82281742769, 0.984075, 0.736087, 0.129527, 27683.970233560176, 0.983196, 0.743758, 0.138453, 28315.351960850123, 0.982228, 0.751442, 0.147565, 28961.133461084275, 0.981173, 0.759135, 0.156863, 29621.47282948137, 0.980032, 0.766837, 0.166353, 30297.042717837907, 0.978806, 0.774545, 0.176037, 30987.841994719794, 0.977497, 0.782258, 0.185923, 31694.574339775427, 0.976108, 0.789974, 0.196018, 32417.238569380424, 0.974638, 0.797692, 0.206332, 33156.570822277354, 0.973088, 0.805409, 0.216877, 33912.764850090716, 0.971468, 0.813122, 0.227658, 34686.005778378254, 0.969783, 0.820825, 0.238686, 35477.081265614295, 0.968041, 0.828515, 0.249972, 36285.98998691795, 0.966243, 0.836191, 0.261534, 37113.555933604126, 0.964394, 0.843848, 0.273391, 37959.77771967813, 0.962517, 0.851476, 0.285546, 38825.5173452445, 0.960626, 0.859069, 0.29801, 39710.77336037594, 0.95872, 0.866624, 0.31082, 40616.447527222925, 0.956834, 0.874129, 0.323974, 41542.77718947036, 0.954997, 0.881569, 0.337475, 42489.98912396241, 0.953215, 0.888942, 0.351369, 43459.0482039746, 0.951546, 0.896226, 0.365627, 44449.952806541805, 0.950018, 0.903409, 0.380271, 45463.712312283926, 0.948683, 0.910473, 0.395289, 46500.32502337219, 0.947594, 0.917399, 0.410665, 47560.846880790225, 0.946809, 0.924168, 0.426373, 48645.55580807274, 0.946392, 0.930761, 0.442367, 49754.717355247514, 0.946403, 0.937159, 0.458592, 50889.46136485131, 0.946903, 0.943348, 0.47497, 52049.78593643237, 0.947937, 0.949318, 0.491426, 53236.87302951766, 0.949545, 0.955063, 0.50786, 54450.72065599215, 0.95174, 0.960587, 0.524203, 55692.56529640754, 0.954529, 0.965896, 0.540361, 56962.73239228999, 0.957896, 0.971003, 0.556275, 58261.53289609766, 0.961812, 0.975924, 0.571925, 59590.289825257525, 0.966249, 0.980678, 0.587206, 60949.00095438807, 0.971162, 0.985282, 0.602154, 62339.050328611556, 0.976511, 0.989753, 0.61676, 63760.43561989472, 0.982257, 0.994109, 0.631017, 65214.60471611946, 0.988362, 0.998364, 0.644924]
pbykBLUT.UseLogScale = 1
pbykBLUT.NanColor = [0.0, 1.0, 0.0]
pbykBLUT.ScalarRangeInitialized = 1.0

# trace defaults for the display properties.
slice1Display.Representation = 'Surface'
slice1Display.ColorArrayName = ['CELLS', 'PbykB']
slice1Display.LookupTable = pbykBLUT
slice1Display.SelectTCoordArray = 'None'
slice1Display.SelectNormalArray = 'None'
slice1Display.SelectTangentArray = 'None'
slice1Display.OSPRayScaleFunction = 'PiecewiseFunction'
slice1Display.SelectOrientationVectors = 'None'
slice1Display.ScaleFactor = 48.0
slice1Display.SelectScaleArray = 'rho'
slice1Display.GlyphType = 'Arrow'
slice1Display.GlyphTableIndexArray = 'rho'
slice1Display.GaussianRadius = 2.4
slice1Display.SetScaleArray = [None, '']
slice1Display.ScaleTransferFunction = 'PiecewiseFunction'
slice1Display.OpacityArray = [None, '']
slice1Display.OpacityTransferFunction = 'PiecewiseFunction'
slice1Display.DataAxesGrid = 'GridAxesRepresentation'
slice1Display.PolarAxes = 'PolarAxesRepresentation'

# show data from annotateTimeFilter1
annotateTimeFilter1Display = Show(annotateTimeFilter1, renderView1, 'TextSourceRepresentation')

# trace defaults for the display properties.
annotateTimeFilter1Display.WindowLocation = 'Upper Center'
annotateTimeFilter1Display.Position = [0.45061728395061723, 0.9375862068965517]
annotateTimeFilter1Display.Bold = 1
annotateTimeFilter1Display.FontSize = 23

# show data from ruler1
ruler1Display = Show(ruler1, renderView1, 'RulerSourceRepresentation')

# trace defaults for the display properties.
ruler1Display.LabelFormat = '%6.3g kpc'
ruler1Display.RulerMode = 1
ruler1Display.Graduation = 25.0
ruler1Display.AxisColor = [0.6666666666666666, 0.6666666666666666, 1.0]
ruler1Display.Color = [0.6666666666666666, 0.6666666666666666, 1.0]

# setup the color legend parameters for each legend in this view

# get color legend/bar for pbykBLUT in view renderView1
pbykBLUTColorBar = GetScalarBar(pbykBLUT, renderView1)
pbykBLUTColorBar.WindowLocation = 'Any Location'
pbykBLUTColorBar.Position = [0.7984567901234568, 0.21379310344827582]
pbykBLUTColorBar.Title = 'PbykB'
pbykBLUTColorBar.ComponentTitle = ''
pbykBLUTColorBar.TitleBold = 1
pbykBLUTColorBar.TitleFontSize = 18
pbykBLUTColorBar.LabelBold = 1
pbykBLUTColorBar.ScalarBarThickness = 18
pbykBLUTColorBar.ScalarBarLength = 0.5727586206896553

# set color bar visibility
pbykBLUTColorBar.Visibility = 1

# show color legend
slice1Display.SetScalarBarVisibility(renderView1, True)

# ----------------------------------------------------------------
# setup color maps and opacity mapes used in the visualization
# note: the Get..() functions create a new object, if needed
# ----------------------------------------------------------------

# get opacity transfer function/opacity map for 'PbykB'
pbykBPWF = GetOpacityTransferFunction('PbykB')
pbykBPWF.Points = [207.61270223501577, 0.0, 0.5, 0.0, 65214.60471611939, 1.0, 0.5, 0.0]
pbykBPWF.ScalarRangeInitialized = 1

# ----------------------------------------------------------------
# setup extractors
# ----------------------------------------------------------------

# create extractor
pNG1 = CreateExtractor('PNG', renderView1, registrationName='PNG1')
# trace defaults for the extractor.
pNG1.Trigger = 'TimeValue'

# init the 'TimeValue' selected for 'Trigger'
pNG1.Trigger.Length = 0.5

# init the 'PNG' selected for 'Writer'
pNG1.Writer.FileName = 'pbykB_{timestep:06d}.png'
pNG1.Writer.ImageResolution = [1215, 725]
pNG1.Writer.FontScaling = 'Do not scale fonts'
pNG1.Writer.OverrideColorPalette = 'BlackBackground'
pNG1.Writer.Format = 'PNG'

# init the 'PNG' selected for 'Format'
pNG1.Writer.Format.CompressionLevel = '0'

# ----------------------------------------------------------------
# restore active source
SetActiveSource(grid)
# ----------------------------------------------------------------

# ------------------------------------------------------------------------------
# Catalyst options
from paraview import catalyst
options = catalyst.Options()
options.ExtractsOutputDirectory = 'output/catalyst/pbykB'
options.GenerateCinemaSpecification = 1
options.GlobalTrigger = 'TimeValue'
options.EnableCatalystLive = 1
options.CatalystLiveTrigger = 'TimeStep'

# init the 'TimeValue' selected for 'GlobalTrigger'
options.GlobalTrigger.Length = 0.001

# ------------------------------------------------------------------------------
if __name__ == '__main__':
    from paraview.simple import SaveExtractsUsingCatalystOptions
    # Code for non in-situ environments; if executing in post-processing
    # i.e. non-Catalyst mode, let's generate extracts using Catalyst options
    SaveExtractsUsingCatalystOptions(options)
